<?php
/**
 * @file
 * Boost Warmer
 */


define('BOOST_WARMER_PATH', 'boost-warmer/crawl');


/**
 * Define variable where we store additional urls to scan for rendering to
 * static html by Boost. (The core set of urls comes from whatever is found in
 * sitemap.xml.)
 */
define('BOOST_WARMER_VAR_URLS_HOOK',    'boost_warmer_urls_hook');
define('BOOST_WARMER_VAR_URLS_STATIC',  'boost_warmer_urls_static');

/**
 * Define variable where we store the maximum number of page requests to 
 * execute per boost warmer run.
 */
define('BOOST_WARMER_VAR_MAX_REQUESTS', 'boost_warmer_max_requests');
define('BOOST_WARMER_DEFAULT_MAX_REQUESTS', 5);

/**
 * Define variable where we store whether we want page requests to be logged
 * via watchdog() or not.
 */
define('BOOST_WARMER_VAR_USE_WATCHDOG', 'boost_warmer_use_watchdog');
define('BOOST_WARMER_DEFAULT_USE_WATCHDOG', 0);

/**
 * Define variable where we store the user agent to request pages with.
 */
define('BOOST_WARMER_VAR_USER_AGENT', 'boost_warmer_user_agent');
define('BOOST_WARMER_DEFAULT_USER_AGENT', 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.13) Gecko/20080311 Firefox/2.0.0.13');


/**
 * Define variables for http auth username and password.
 */
define('BOOST_WARMER_VAR_HTTPAUTH_USER', 'boost_warmer_httpauth_user');
define('BOOST_WARMER_VAR_HTTPAUTH_PASS', 'boost_warmer_httpauth_pass');


/**
 * Define variable that stores the current queue of urls to crawl.
 */
define('BOOST_WARMER_VAR_QUEUE', 'boost_warmer_queue');




/**
 * Implements hook_menu().
 */
function boost_warmer_menu() {
  $items = array();
  $items[BOOST_WARMER_PATH] = array(
    'type'              => MENU_CALLBACK,
    'page callback'     => 'boost_warmer_page_crawl',
    'access callback'   => TRUE,
  );

  $items['admin/config/system/boost-warmer'] = array(
    'title'             => 'Boost Warmer',
    'description'       => 'Configuration for Boost Warmer.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('boost_warmer_admin_settings'),
    'access arguments'  => array('administer site configuration'),
    'type'              => MENU_NORMAL_ITEM,
    'file'              => 'boost_warmer.admin.inc',
  );

  return $items;
}


/**
 * There are 2 steps to the crawl process:
 * 1. Run boost_cron() to delete any cached html files that have expired.
 * 2. Crawl any pages that haven't been cached yet.
 */
function boost_warmer_page_crawl() {
  // Tell Boost to remove any cached html files that have expired.
  boost_cron();


  // Get additional urls to crawl from third-party modules.
  boost_warmer_page_crawl_prepare();


  // Crawl any pages that haven't been cached yet (or have expired).
  $options = (object) array(
    'max_requests'  => variable_get(BOOST_WARMER_VAR_MAX_REQUESTS, BOOST_WARMER_DEFAULT_MAX_REQUESTS),
    'user_agent'    => variable_get(BOOST_WARMER_VAR_USER_AGENT, BOOST_WARMER_DEFAULT_USER_AGENT),
    'auth_user'     => variable_get(BOOST_WARMER_VAR_HTTPAUTH_USER, ''),
    'auth_pass'     => variable_get(BOOST_WARMER_VAR_HTTPAUTH_PASS, ''),
  );
  $o = new BoostWarmer($options);
  $requested_urls = $o->crawl();


  // Log a record of the pages we requested.
  $use_watchdog = (int) variable_get(BOOST_WARMER_VAR_USE_WATCHDOG, BOOST_WARMER_DEFAULT_USE_WATCHDOG);
  if ($use_watchdog && count($requested_urls) > 0) {
    $message  = "Requested %count urls: " . implode(', ', $requested_urls);
    $vars     = array('%count' => count($requested_urls));
    watchdog('boost_warmer', $message, $vars, WATCHDOG_INFO);
  }


  // Force a clean exit, with no output.
  #return 'test';
  exit(0);
}


/**
 * Before running the page crawl event, update the list of urls to crawl that
 * are defined by third-party modules.
 */
function boost_warmer_page_crawl_prepare() {
  // Ask modules for urls that may not be in sitemap.xml. These urls will also
  // be considered when checking for cached boost pages.
  $hook     = 'boost_warmer_get_urls';
  $modules  = module_implements($hook);

  $urls = array();
  for ($i=0; $i<count($modules); $i++) {
    $items = module_invoke($modules[$i], $hook);
    $urls += $items;
  }

  variable_set(BOOST_WARMER_VAR_URLS_HOOK, $urls);
}
