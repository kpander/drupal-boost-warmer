<?php
/**
 * @file
 * Boost Warmer administrative interface.
 */



/**
 * Implements hook_menu().
 */
function boost_warmer_admin_menu() {
  $items = array();

  $items['admin/config/system/boost-warmer'] = array(
    'title'             => 'Boost Warmer',
    'description'       => 'Configuration for Boost Warmer.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('boost_warmer_admin_settings'),
    'access arguments'  => array('administer site configuration'),
    'type'              => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Prepare the module settings form.
 */
function boost_warmer_admin_settings() {
  $form = array();

  $form[BOOST_WARMER_VAR_MAX_REQUESTS] = array(
    '#title'          => 'Maximum number of page requests per execution',
    '#type'           => 'textfield',
    '#default_value'  => variable_get(BOOST_WARMER_VAR_MAX_REQUESTS, BOOST_WARMER_DEFAULT_MAX_REQUESTS),
  );

  $form[BOOST_WARMER_VAR_USE_WATCHDOG] = array(
    '#title'          => "Should page requests be logged via watchdog?",
    '#type'           => 'checkbox',
    '#description'    => "This can quickly fill up your database. Only enable this if you know what you're doing!",
    '#default_value'  => variable_get(BOOST_WARMER_VAR_USE_WATCHDOG, BOOST_WARMER_DEFAULT_USE_WATCHDOG),
  );


  $form[BOOST_WARMER_VAR_URLS_STATIC] = array(
    '#title'          => "Additional paths to test for Boost cache expiry",
    '#type'           => 'textarea',
    '#description'    => "These should be paths that do not exist in sitemap.xml, nor are identified by hook_boost_warmer_get_urls().<br><br>One per line. Do not including leading '/' or http://.<br><br>This is useful when you have paths that you want cached that don't exist in sitemap.xml.",
    '#default_value'  => variable_get(BOOST_WARMER_VAR_URLS_STATIC, ''),
  );


  // Get username and password for http authorization (for crawling/requesting
  // pages that are behind http authentication).
  $collapsed = (variable_get(BOOST_WARMER_VAR_HTTPAUTH_PASS, '') == '') ? TRUE : FALSE;
  $form['httpauth'] = array(
    '#title'          => 'HTTP Authentication',
    '#type'           => 'fieldset',
    '#collapsible'    => TRUE,
    '#collapsed'      => $collapsed,
    '#description'    => "To access web pages that require HTTP authentication, enter the username and password here.",
  );
  $form['httpauth'][BOOST_WARMER_VAR_HTTPAUTH_USER] = array(
    '#title'          => "HTTP Auth username",
    '#type'           => 'textfield',
    '#default_value'  => variable_get(BOOST_WARMER_VAR_HTTPAUTH_USER, ''),
  );
  $form['httpauth'][BOOST_WARMER_VAR_HTTPAUTH_PASS] = array(
    '#title'          => "HTTP Auth password",
    '#type'           => 'textfield',
    '#default_value'  => variable_get(BOOST_WARMER_VAR_HTTPAUTH_PASS, ''),
  );


  // Allow the page requests to be executed with a specific user agent.
  $form['useragent'] = array(
    '#title'          => 'Browser User Agent',
    '#type'           => 'fieldset',
    '#collapsible'    => TRUE,
    '#collapsed'      => TRUE,
    '#description'    => "If your site expects certain types of browsers, you'll want to set this to something typical, e.g.:<br>" . BOOST_WARMER_DEFAULT_USER_AGENT . "<br><br>However, if you want to be able to filter for and ignore boost_warmer page requests (e.g., in your analytics tool) set this to something custom, e.g., boost_warmer",
  );
  $form['useragent'][BOOST_WARMER_VAR_USER_AGENT] = array(
    '#title'          => "User agent to request pages with",
    '#type'           => 'textfield',
    '#default_value'  => variable_get(BOOST_WARMER_VAR_USER_AGENT, BOOST_WARMER_DEFAULT_USER_AGENT),
  );


  return system_settings_form($form);
}
