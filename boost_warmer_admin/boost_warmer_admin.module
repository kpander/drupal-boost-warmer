<?php
/**
 * @file
 * Boost Warmer administrative interface.
 */

/**
 * Define the path to the module settings page.
 */
define('BOOST_WARMER_ADMIN_PATH', 'admin/config/system/boost-warmer');


/**
 * Implements hook_menu().
 */
function boost_warmer_admin_menu() {
  $items = array();

  $items[BOOST_WARMER_ADMIN_PATH] = array(
    'title'             => 'Boost Warmer',
    'description'       => 'Configuration for Boost Warmer.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('boost_warmer_admin_settings'),
    'access arguments'  => array('administer site configuration'),
    'type'              => MENU_NORMAL_ITEM,
  );

  return $items;
}


/**
 * Prepare the module settings form.
 *
 * If we detect the 'reset' argument, clear the queue.
 */
function boost_warmer_admin_settings() {
  $arg = arg(4);

  // If we selected the 'Empty the queue' link, empty... the queue.
  if ($arg === 'reset') {
    drupal_set_message(t("The Boost Warmer queue has been emptied."));
    boost_warmer_empty_queue();
  }
  elseif ($arg === 'crawl-all') {
    drupal_set_message("Beginning crawl of all site urls...");
    boost_warmer_admin_crawl();
  }


  $form = array();

  // Provide an 'Empty queue' link.
  boost_warmer_admin_settings_reset($form);

  // Provide a 'Crawl all pages now' link.
  boost_warmer_admin_settings_crawl($form);

  $form[BOOST_WARMER_VAR_MAX_REQUESTS] = array(
    '#title'          => t('Maximum number of page requests per execution'),
    '#type'           => 'textfield',
    '#default_value'  => variable_get(BOOST_WARMER_VAR_MAX_REQUESTS, BOOST_WARMER_DEFAULT_MAX_REQUESTS),
  );

  $form[BOOST_WARMER_VAR_USE_WATCHDOG] = array(
    '#title'          => t("Should page requests be logged via watchdog?"),
    '#type'           => 'checkbox',
    '#description'    => t("This can quickly fill up your database. Only enable this if you know what you're doing!"),
    '#default_value'  => variable_get(BOOST_WARMER_VAR_USE_WATCHDOG, BOOST_WARMER_DEFAULT_USE_WATCHDOG),
  );

  $form[BOOST_WARMER_VAR_URLS_STATIC] = array(
    '#title'          => t("Additional paths to test for Boost cache expiry"),
    '#type'           => 'textarea',
    '#description'    => t("These should be paths that do not exist in sitemap.xml, nor are identified by hook_boost_warmer_get_urls().<br/><br/>One per line. Do not including leading '/' or http://.<br/><br/>This is useful when you have paths to crawl that are not found in sitemap.xml."),
    '#default_value'  => variable_get(BOOST_WARMER_VAR_URLS_STATIC, ''),
  );

  // Get username and password for http authorization (for crawling/requesting
  // pages that are behind http authentication).
  boost_warmer_admin_settings_httpauth($form);

  return system_settings_form($form);
}

/**
 * Add form elements for providing a 'reset queue now' button.
 */
function boost_warmer_admin_settings_reset(&$form) {
  $form['reset'] = array(
    '#title'          => t('Empty Boost Warmer Queue'),
    '#type'           => 'fieldset',
    '#collapsible'    => TRUE,
    '#collapsed'      => TRUE,
  );

  $queue = variable_get(BOOST_WARMER_VAR_QUEUE, array());
  $form['reset']['reset'] = array(
    '#type'           => 'markup',
    '#markup'         => '<p>' . t("The Boost Warmer queue currently contains @count items.", array('@count' => count($queue))) . '</p>' . '<p>' . l(t("Empty the queue."), BOOST_WARMER_ADMIN_PATH . '/reset') . '</p>',
  );
}

/**
 * Add form elements for providing a 'crawl all urls now' button.
 */
function boost_warmer_admin_settings_crawl(&$form) {
  $form['crawl'] = array(
    '#title'          => t('Crawl all pages now'),
    '#type'           => 'fieldset',
    '#collapsible'    => TRUE,
    '#collapsed'      => TRUE,
  );

  $form['crawl']['crawl'] = array(
    '#type'           => 'markup',
    '#markup'         => '<p>' . t("Use this link to crawl all defined pages in your site now. Note: This will take a long time if you have many pages, and may affect the performance of the site. These requests will also not be logged to watchdog. This entire process is something best done in 'off' hours!") . '</p>' . '<p>' . l(t("Crawl all pages now."), BOOST_WARMER_ADMIN_PATH . '/crawl-all') . '</p>',
  );
}

/**
 * Add form elements for configuring the httpauth settings.
 */
function boost_warmer_admin_settings_httpauth(&$form) {
  $collapsed = (variable_get(BOOST_WARMER_VAR_HTTPAUTH_PASS, '') == '') ? TRUE : FALSE;
  $form['httpauth'] = array(
    '#title'          => t('HTTP Authentication'),
    '#type'           => 'fieldset',
    '#collapsible'    => TRUE,
    '#collapsed'      => $collapsed,
    '#description'    => t("To access web pages that require HTTP authentication, enter the username and password here."),
  );
  $form['httpauth'][BOOST_WARMER_VAR_HTTPAUTH_USER] = array(
    '#title'          => t("HTTP Auth username"),
    '#type'           => 'textfield',
    '#default_value'  => variable_get(BOOST_WARMER_VAR_HTTPAUTH_USER, ''),
  );
  $form['httpauth'][BOOST_WARMER_VAR_HTTPAUTH_PASS] = array(
    '#title'          => t("HTTP Auth password"),
    '#type'           => 'textfield',
    '#default_value'  => variable_get(BOOST_WARMER_VAR_HTTPAUTH_PASS, ''),
  );

  // Allow the page requests to be executed with a specific user agent.
  $form['useragent'] = array(
    '#title'          => t('Browser User Agent'),
    '#type'           => 'fieldset',
    '#collapsible'    => TRUE,
    '#collapsed'      => TRUE,
    '#description'    => t("If your site expects certain types of browsers, you'll want to set this to something typical, e.g.:") . '<br/>' . BOOST_WARMER_DEFAULT_USER_AGENT . '<br/><br/>' . t("However, if you want to be able to filter for and ignore boost_warmer page requests (e.g., in your analytics tool) set this to something custom, e.g., boost_warmer"),
  );
  $form['useragent'][BOOST_WARMER_VAR_USER_AGENT] = array(
    '#title'          => t("User agent to request pages with"),
    '#type'           => 'textfield',
    '#default_value'  => variable_get(BOOST_WARMER_VAR_USER_AGENT, BOOST_WARMER_DEFAULT_USER_AGENT),
  );
}


/**
 * Begin a batch api process to crawl all urls handled by Boost Warmer.
 */
function boost_warmer_admin_crawl() {
  // Get the list of urls to crawl.
  boost_warmer_page_crawl_prepare();
  $o = new BoostWarmer(boost_warmer_get_crawl_config());
  $items = $o->getUrls();

  // Prepare the batch.
  $operations = array();
  $function = 'boost_warmer_admin_crawl_process';

  foreach ($items as $item) {
    $args = array($item);
    $operations[] = array($function, $args);
  }

  $batch = array(
    'operations'  => $operations,
    'finished'    => 'boost_warmer_admin_crawl_finished',
  );

  // Begin the batch api process.
  batch_set($batch);
  batch_process(BOOST_WARMER_ADMIN_PATH);
}

/**
 * Process a single url, within the batch api process.
 */
function boost_warmer_admin_crawl_process($url, &$context) {
  $context['message'] = "Requesting url [{$url}]";
  $context['results'][] = $url;

  $o = new BoostWarmer(boost_warmer_get_crawl_config());
  $o->crawlUrl($url);
}

/**
 * Display a summary message once the batch api process has completed.
 */
function boost_warmer_admin_crawl_finished($success, $results, $operations) {
  $message = "Crawl process complete. ";

  if ($success) {
    $message .= count($results) . ' urls processed.';
  }
  else {
    // An error occurred.
    $error_operation = reset($operations);
    $message = 'An error occurred while processing ' . $error_operation[0] . ' with arguments: ' . print_r($error_operation[0], TRUE) . '.';
  }

  drupal_set_message($message);
}

